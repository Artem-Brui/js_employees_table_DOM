{"mappings":"A,S,E,C,C,C,E,C,A,M,G,E,E,M,A,G,C,E,E,M,A,E,I,I,E,E,E,A,M,G,E,E,I,C,C,E,C,C,C,E,C,O,C,C,S,E,C,E,O,A,S,C,E,G,M,O,C,G,O,E,E,E,I,A,S,C,E,G,A,a,O,Q,A,M,C,C,O,Q,C,E,A,M,C,C,a,C,O,M,I,C,E,E,I,E,I,A,W,M,A,U,wI,G,C,S,E,C,C,C,E,G,G,G,A,U,O,E,O,E,E,G,I,E,O,S,C,Q,C,I,C,G,K,C,E,I,G,W,G,E,W,E,C,E,E,W,C,I,A,E,A,Q,G,A,Q,E,O,M,I,C,G,G,A,c,G,2C,I,C,G,O,E,E,G,CCKA,IAAM,EAAK,CACT,KAAM,SAAS,IAAI,CACnB,MAAO,SAAS,aAAa,CAAC,SAC9B,UAAW,SAAS,aAAa,CAAC,QACpC,EACI,EAAuB,KAE3B,SAAS,EAAY,CAAM,EACzB,MAAQ,GAA4B,MAAA,CAA1B,CAAM,CAAC,EAAE,CAAC,WAAW,IAAwC,MAAA,CAAnC,EAAO,KAAK,CAAC,IAAI,KAAK,CAAC,GAAG,IAAI,CAAC,IACrE,CAKA,SAAS,EAAU,CAAU,EACtB,IAAA,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,KAAA,E,G,CAAL,IAAA,IAAK,EAAA,EAAa,EAAG,SAAS,CAAC,QAAQ,CAAA,OAAA,QAAA,CAAA,GAAlC,CAAA,CAAA,EAAA,AAAA,CAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,AAAA,EAAA,EAAL,CAAA,EACE,AADG,EAAA,KAAA,CACC,SAAS,CAAC,MAAM,CAAC,S,C,M,E,CADlB,EAAA,CAAA,EAAA,EAAA,C,Q,C,G,CAAA,GAAA,AAAA,MAAA,EAAA,MAAA,EAAA,EAAA,MAAA,E,Q,CAAA,GAAA,EAAA,MAAA,C,C,CAID,GACF,CAAA,EAAW,SAAS,CAAG,QADzB,CAGF,CA0DA,SAAS,IAAiB,IAAA,EAAA,UAAA,MAAA,CAAA,GAAA,AAAA,KAAA,IAAA,SAAA,CAAA,EAAA,CAAA,SAAA,CAAA,EAAA,CAAO,UACzB,EAAQ,AAAS,UAAT,EAAmB,SAAW,WACtC,EACJ,AAAS,UAAT,EACI,mDACA,iDAGA,EAAW,CACf,UAAW,S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","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nfunction _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_with_holes(arr) {\n    if (Array.isArray(arr)) return arr;\n}\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nfunction _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _iterable_to_array_limit(arr, i) {\n    var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n    if (_i == null) return;\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _s, _e;\n    try {\n        for(_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true){\n            _arr.push(_s.value);\n            if (i && _arr.length === i) break;\n        }\n    } catch (err) {\n        _d = true;\n        _e = err;\n    } finally{\n        try {\n            if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n        } finally{\n            if (_d) throw _e;\n        }\n    }\n    return _arr;\n}\nfunction _non_iterable_rest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _sliced_to_array(arr, i) {\n    return _array_with_holes(arr) || _iterable_to_array_limit(arr, i) || _unsupported_iterable_to_array(arr, i) || _non_iterable_rest();\n}\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\n// write code here\n// #region direct variables\nvar el = {\n    body: document.body,\n    table: document.querySelector(\"table\"),\n    tableBody: document.querySelector(\"tbody\")\n};\nvar DefaultSortDirection = \"up\";\nfunction capitalizer(string) {\n    return \"\".concat(string[0].toUpperCase()).concat(string.split(\"\").slice(1).join(\"\"));\n}\n// #endregion\n// #region row selecting and sorting implementation\nfunction selectRow(rowElement) {\n    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n    try {\n        for(var _iterator = el.tableBody.children[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n            var row = _step.value;\n            row.classList.remove(\"active\");\n        }\n    } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n    } finally{\n        try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n                _iterator.return();\n            }\n        } finally{\n            if (_didIteratorError) {\n                throw _iteratorError;\n            }\n        }\n    }\n    if (rowElement) rowElement.className = \"active\";\n}\nfunction sortTable(tableElement, index) {\n    var direction = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : \"up\";\n    function convertToNumber(string) {\n        return Number(string.replace(/[$,]/g, \"\"));\n    }\n    function sorter(arr) {\n        return arr.sort(function(a, b) {\n            var colunmOne = _to_consumable_array(a.children)[index].innerText;\n            var colunmTwo = _to_consumable_array(b.children)[index].innerText;\n            if (!isNaN(convertToNumber(colunmOne))) return direction === \"up\" ? convertToNumber(colunmTwo) - convertToNumber(colunmOne) : convertToNumber(colunmOne) - convertToNumber(colunmTwo);\n            else return direction === \"up\" ? colunmTwo.localeCompare(colunmOne) : colunmOne.localeCompare(colunmTwo);\n        });\n    }\n    var newRows = _to_consumable_array(tableElement.children);\n    tableElement.innerHTML = \"\";\n    sorter(newRows).forEach(function(row) {\n        return tableElement.appendChild(row);\n    });\n}\n// #endregion\n// #region handling row sorting and selecting\nfunction handleSelect(eventTarget) {\n    return eventTarget.tagName === \"TD\" && eventTarget.closest(\"TR\").parentNode.tagName === \"TBODY\" ? selectRow(eventTarget.closest(\"tr\")) : selectRow();\n}\nfunction handleSort(eventTarget) {\n    if (eventTarget.tagName === \"TH\") {\n        var cloneCollection = _to_consumable_array(eventTarget.parentNode.children);\n        var index = cloneCollection.indexOf(eventTarget, 0);\n        DefaultSortDirection = DefaultSortDirection === \"up\" ? \"down\" : \"up\";\n        sortTable(el.tableBody, index, DefaultSortDirection);\n    }\n}\nel.body.addEventListener(\"click\", function(ev) {\n    handleSelect(ev.target);\n    handleSort(ev.target);\n});\n// #endregion\n// #region build notification message\nfunction pushNotification() {\n    var type = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : \"success\";\n    var title = type === \"error\" ? \"Error!\" : \"Success!\";\n    var description = type === \"error\" ? \"Please fill correct data in fields with mistakes\" : \"Great job! New employee was added to the table\";\n    // write code here\n    var elements = {\n        container: document.createElement(\"div\"),\n        title: document.createElement(\"h2\"),\n        description: document.createElement(\"p\")\n    };\n    // build DOM\n    document.body.appendChild(elements.container);\n    elements.container.appendChild(elements.title);\n    elements.container.appendChild(elements.description);\n    // apply styles\n    elements.container.className = \"notification\";\n    elements.container.classList.add(type);\n    elements.container.setAttribute(\"data-qa\", \"notification\");\n    elements.title.className = \"title\";\n    // fill content\n    elements.title.textContent = title;\n    elements.description.textContent = description;\n    // apply coordinates\n    elements.container.style.top = \"10px\";\n    elements.container.style.right = \"10px\";\n    // desappire after delay 2sec\n    setTimeout(function() {\n        elements.container.style.display = \"none\";\n    }, 2000);\n}\n// #endregion\n// #region form building and handling submit\nfunction buildForm() {\n    var form = {\n        form: document.createElement(\"form\"),\n        label: document.createElement(\"label\"),\n        input: document.createElement(\"input\"),\n        select: document.createElement(\"select\"),\n        option: document.createElement(\"option\"),\n        button: document.createElement(\"button\")\n    };\n    function buildFormElement(parentElement, childElement, type, InputName) {\n        var parentClone = parentElement.cloneNode(true);\n        var childClone = childElement.cloneNode(true);\n        childClone.setAttribute(\"type\", type);\n        childClone.setAttribute(\"name\", InputName);\n        childClone.setAttribute(\"data-qa\", InputName);\n        var capitalizedName = capitalizer(InputName) + \":\";\n        parentClone.textContent = capitalizedName;\n        parentClone.appendChild(childClone);\n        if (childClone.name === \"office\") {\n            var offices = [\n                \"Tokyo\",\n                \"Singapore\",\n                \"London\",\n                \"New York\",\n                \"Edinburgh\",\n                \"San Francisco\"\n            ];\n            // create options in select\n            offices.forEach(function(item) {\n                var newOption = form.option.cloneNode(true);\n                childClone.appendChild(newOption);\n                newOption.textContent = item;\n                newOption.setAttribute(\"value\", item);\n            });\n        }\n        return parentClone;\n    }\n    el.body.appendChild(form.form);\n    form.form.className = \"new-employee-form\";\n    form.form.appendChild(buildFormElement(form.label, form.input, \"text\", \"name\"));\n    form.form.appendChild(buildFormElement(form.label, form.input, \"text\", \"position\"));\n    form.form.appendChild(buildFormElement(form.label, form.select, \"\", \"office\"));\n    form.form.appendChild(buildFormElement(form.label, form.input, \"number\", \"age\"));\n    form.form.appendChild(buildFormElement(form.label, form.input, \"number\", \"salary\"));\n    form.form.appendChild(form.button);\n    form.button.setAttribute(\"type\", \"submit\");\n    form.button.textContent = \"Save to table\";\n}\nfunction addToTable(nameInput, position, office, age, salary) {\n    var row = {\n        row: document.createElement(\"tr\"),\n        column: document.createElement(\"td\")\n    };\n    function salaryConverter(string) {\n        return Number(string).toLocaleString(\"en-US\", {\n            style: \"currency\",\n            currency: \"USD\",\n            minimumFractionDigits: 0,\n            maximumFractionDigits: 0\n        });\n    }\n    function capitalizeCellData(string) {\n        return string.split(\" \").map(function(word) {\n            return capitalizer(word);\n        }).join(\" \");\n    }\n    var nameCol = row.column.cloneNode();\n    var positionCol = row.column.cloneNode();\n    var officeCol = row.column.cloneNode();\n    var ageCol = row.column.cloneNode();\n    var salaryCol = row.column.cloneNode();\n    nameCol.textContent = capitalizeCellData(nameInput);\n    positionCol.textContent = capitalizeCellData(position);\n    officeCol.textContent = office;\n    ageCol.textContent = age;\n    salaryCol.textContent = salaryConverter(salary);\n    row.row.appendChild(nameCol);\n    row.row.appendChild(positionCol);\n    row.row.appendChild(officeCol);\n    row.row.appendChild(ageCol);\n    row.row.appendChild(salaryCol);\n    el.tableBody.appendChild(row.row);\n}\nfunction handleFormSubmit(formData) {\n    var dataObject = {};\n    var isStringCorrect = function(string) {\n        return /[a-zA-Z ]/g.test(string);\n    };\n    var errors = 0;\n    function drawInputError(inputName) {\n        var inputs = currentForm.querySelectorAll(\"input\");\n        if (inputName) {\n            var errorInput = _to_consumable_array(inputs).filter(function(item) {\n                return item.name === inputName;\n            })[0];\n            errorInput.style.outline = \"2px solid red\";\n        } else _to_consumable_array(inputs).forEach(function(item) {\n            item.style.outline = \"\";\n        });\n    }\n    drawInputError();\n    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n    try {\n        for(var _iterator = formData.entries()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n            var _step_value = _sliced_to_array(_step.value, 2), key = _step_value[0], value = _step_value[1];\n            dataObject[key] = value;\n            switch(key){\n                case \"name\":\n                    if (!isStringCorrect(value) || value.length < 4) {\n                        drawInputError(key);\n                        errors++;\n                    }\n                    break;\n                case \"position\":\n                    if (!isStringCorrect(value)) {\n                        drawInputError(key);\n                        errors++;\n                    }\n                    break;\n                case \"age\":\n                    if (Number(value) > 90 || Number(value) < 18) {\n                        drawInputError(key);\n                        errors++;\n                    }\n                    break;\n            }\n        }\n    } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n    } finally{\n        try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n                _iterator.return();\n            }\n        } finally{\n            if (_didIteratorError) {\n                throw _iteratorError;\n            }\n        }\n    }\n    if (errors === 0) {\n        pushNotification();\n        drawInputError();\n        currentForm.reset();\n        addToTable(dataObject.name, dataObject.position, dataObject.office, dataObject.age, dataObject.salary);\n    } else pushNotification(\"error\");\n}\nbuildForm();\nvar currentForm = document.querySelector(\".new-employee-form\");\ncurrentForm.addEventListener(\"submit\", function(ev) {\n    ev.preventDefault();\n    var formValues = new FormData(currentForm);\n    handleFormSubmit(formValues);\n}); // #endregion\n\n//# sourceMappingURL=index.34ae77fe.js.map\n","'use strict';\n\n// write code here\n\n// #region direct variables\nconst el = {\n  body: document.body,\n  table: document.querySelector('table'),\n  tableBody: document.querySelector('tbody'),\n};\nlet DefaultSortDirection = 'up';\n\nfunction capitalizer(string) {\n  return `${string[0].toUpperCase()}${string.split('').slice(1).join('')}`;\n}\n// #endregion\n\n// #region row selecting and sorting implementation\n\nfunction selectRow(rowElement) {\n  for (const row of el.tableBody.children) {\n    row.classList.remove('active');\n  }\n\n  if (rowElement) {\n    rowElement.className = 'active';\n  }\n}\n\nfunction sortTable(tableElement, index, direction = 'up') {\n  function convertToNumber(string) {\n    return Number(string.replace(/[$,]/g, ''));\n  }\n\n  function sorter(arr) {\n    return arr.sort((a, b) => {\n      const colunmOne = [...a.children][index].innerText;\n      const colunmTwo = [...b.children][index].innerText;\n\n      if (!isNaN(convertToNumber(colunmOne))) {\n        return direction === 'up'\n          ? convertToNumber(colunmTwo) - convertToNumber(colunmOne)\n          : convertToNumber(colunmOne) - convertToNumber(colunmTwo);\n      } else {\n        return direction === 'up'\n          ? colunmTwo.localeCompare(colunmOne)\n          : colunmOne.localeCompare(colunmTwo);\n      }\n    });\n  }\n\n  const newRows = [...tableElement.children];\n\n  tableElement.innerHTML = '';\n  sorter(newRows).forEach((row) => tableElement.appendChild(row));\n}\n// #endregion\n\n// #region handling row sorting and selecting\n\nfunction handleSelect(eventTarget) {\n  return eventTarget.tagName === 'TD' &&\n    eventTarget.closest('TR').parentNode.tagName === 'TBODY'\n    ? selectRow(eventTarget.closest('tr'))\n    : selectRow();\n}\n\nfunction handleSort(eventTarget) {\n  if (eventTarget.tagName === 'TH') {\n    const cloneCollection = [...eventTarget.parentNode.children];\n    const index = cloneCollection.indexOf(eventTarget, 0);\n\n    DefaultSortDirection = DefaultSortDirection === 'up' ? 'down' : 'up';\n    sortTable(el.tableBody, index, DefaultSortDirection);\n  }\n}\n\nel.body.addEventListener('click', (ev) => {\n  handleSelect(ev.target);\n  handleSort(ev.target);\n});\n// #endregion\n\n// #region build notification message\n\nfunction pushNotification(type = 'success') {\n  const title = type === 'error' ? 'Error!' : 'Success!';\n  const description =\n    type === 'error'\n      ? 'Please fill correct data in fields with mistakes'\n      : 'Great job! New employee was added to the table';\n\n  // write code here\n  const elements = {\n    container: document.createElement('div'),\n    title: document.createElement('h2'),\n    description: document.createElement('p'),\n  };\n\n  // build DOM\n  document.body.appendChild(elements.container);\n  elements.container.appendChild(elements.title);\n  elements.container.appendChild(elements.description);\n\n  // apply styles\n  elements.container.className = 'notification';\n  elements.container.classList.add(type);\n  elements.container.setAttribute('data-qa', 'notification');\n  elements.title.className = 'title';\n\n  // fill content\n  elements.title.textContent = title;\n  elements.description.textContent = description;\n\n  // apply coordinates\n  elements.container.style.top = `10px`;\n  elements.container.style.right = `10px`;\n\n  // desappire after delay 2sec\n  setTimeout(() => {\n    elements.container.style.display = 'none';\n  }, 2000);\n}\n// #endregion\n\n// #region form building and handling submit\n\nfunction buildForm() {\n  const form = {\n    form: document.createElement('form'),\n    label: document.createElement('label'),\n    input: document.createElement('input'),\n    select: document.createElement('select'),\n    option: document.createElement('option'),\n    button: document.createElement('button'),\n  };\n\n  function buildFormElement(parentElement, childElement, type, InputName) {\n    const parentClone = parentElement.cloneNode(true);\n    const childClone = childElement.cloneNode(true);\n\n    childClone.setAttribute('type', type);\n    childClone.setAttribute('name', InputName);\n    childClone.setAttribute('data-qa', InputName);\n\n    const capitalizedName = capitalizer(InputName) + ':';\n\n    parentClone.textContent = capitalizedName;\n    parentClone.appendChild(childClone);\n\n    if (childClone.name === 'office') {\n      const offices = [\n        'Tokyo',\n        'Singapore',\n        'London',\n        'New York',\n        'Edinburgh',\n        'San Francisco',\n      ];\n\n      // create options in select\n      offices.forEach((item) => {\n        const newOption = form.option.cloneNode(true);\n\n        childClone.appendChild(newOption);\n        newOption.textContent = item;\n        newOption.setAttribute('value', item);\n      });\n    }\n\n    return parentClone;\n  }\n\n  el.body.appendChild(form.form);\n  form.form.className = 'new-employee-form';\n\n  form.form.appendChild(\n    buildFormElement(form.label, form.input, 'text', 'name'),\n  );\n\n  form.form.appendChild(\n    buildFormElement(form.label, form.input, 'text', 'position'),\n  );\n\n  form.form.appendChild(\n    buildFormElement(form.label, form.select, '', 'office'),\n  );\n\n  form.form.appendChild(\n    buildFormElement(form.label, form.input, 'number', 'age'),\n  );\n\n  form.form.appendChild(\n    buildFormElement(form.label, form.input, 'number', 'salary'),\n  );\n\n  form.form.appendChild(form.button);\n  form.button.setAttribute('type', 'submit');\n  form.button.textContent = 'Save to table';\n}\n\nfunction addToTable(nameInput, position, office, age, salary) {\n  const row = {\n    row: document.createElement('tr'),\n    column: document.createElement('td'),\n  };\n\n  function salaryConverter(string) {\n    return Number(string).toLocaleString('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    });\n  }\n\n  function capitalizeCellData(string) {\n    return string\n      .split(' ')\n      .map((word) => capitalizer(word))\n      .join(' ');\n  }\n\n  const nameCol = row.column.cloneNode();\n  const positionCol = row.column.cloneNode();\n  const officeCol = row.column.cloneNode();\n  const ageCol = row.column.cloneNode();\n  const salaryCol = row.column.cloneNode();\n\n  nameCol.textContent = capitalizeCellData(nameInput);\n  positionCol.textContent = capitalizeCellData(position);\n  officeCol.textContent = office;\n  ageCol.textContent = age;\n  salaryCol.textContent = salaryConverter(salary);\n\n  row.row.appendChild(nameCol);\n  row.row.appendChild(positionCol);\n  row.row.appendChild(officeCol);\n  row.row.appendChild(ageCol);\n  row.row.appendChild(salaryCol);\n\n  el.tableBody.appendChild(row.row);\n}\n\nfunction handleFormSubmit(formData) {\n  const dataObject = {};\n  const isStringCorrect = (string) => /[a-zA-Z ]/g.test(string);\n  let errors = 0;\n\n  function drawInputError(inputName) {\n    const inputs = currentForm.querySelectorAll('input');\n\n    if (inputName) {\n      const errorInput = [...inputs].filter(\n        (item) => item.name === inputName,\n      )[0];\n\n      errorInput.style.outline = '2px solid red';\n    } else {\n      [...inputs].forEach((item) => {\n        item.style.outline = '';\n      });\n    }\n  }\n\n  drawInputError();\n\n  for (const [key, value] of formData.entries()) {\n    dataObject[key] = value;\n\n    switch (key) {\n      case 'name':\n        if (!isStringCorrect(value) || value.length < 4) {\n          drawInputError(key);\n          errors++;\n        }\n        break;\n      case 'position':\n        if (!isStringCorrect(value)) {\n          drawInputError(key);\n          errors++;\n        }\n        break;\n      case 'age':\n        if (Number(value) > 90 || Number(value) < 18) {\n          drawInputError(key);\n          errors++;\n        }\n        break;\n    }\n  }\n\n  if (errors === 0) {\n    pushNotification();\n    drawInputError();\n    currentForm.reset();\n\n    addToTable(\n      dataObject.name,\n      dataObject.position,\n      dataObject.office,\n      dataObject.age,\n      dataObject.salary,\n    );\n  } else {\n    pushNotification('error');\n  }\n}\n\nbuildForm();\n\nconst currentForm = document.querySelector('.new-employee-form');\n\ncurrentForm.addEventListener('submit', (ev) => {\n  ev.preventDefault();\n\n  const formValues = new FormData(currentForm);\n\n  handleFormSubmit(formValues);\n});\n// #endregion\n"],"names":["_array_like_to_array","arr","len","length","i","arr2","Array","_to_consumable_array","_array_without_holes","isArray","_iterable_to_array","iter","Symbol","iterator","from","_unsupported_iterable_to_array","_non_iterable_spread","TypeError","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","el","body","document","table","querySelector","tableBody","DefaultSortDirection","capitalizer","string","concat","toUpperCase","split","join","selectRow","rowElement","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","children","next","done","row","value","classList","remove","err","return","className","pushNotification","type","arguments","title","description","elements","container","createElement","appendChild","add","setAttribute","textContent","style","top","right","setTimeout","display","addEventListener","ev","eventTarget","target","tagName","closest","parentNode","handleSort","index","cloneCollection","indexOf","sortTable","tableElement","direction","convertToNumber","Number","replace","newRows","innerHTML","sorter","sort","a","b","colunmOne","innerText","colunmTwo","isNaN","localeCompare","forEach","buildForm","form","label","input","select","option","button","buildFormElement","parentElement","childElement","InputName","parentClone","cloneNode","childClone","capitalizedName","offices","item","newOption","currentForm","preventDefault","handleFormSubmit","formData","dataObject","isStringCorrect","errors","drawInputError","inputName","inputs","querySelectorAll","errorInput","filter","outline","entries","_step_value","_array_with_holes","_iterable_to_array_limit","_s","_e","_i","_arr","_n","_d","push","_non_iterable_rest","key","reset","addToTable","nameInput","position","office","age","salary","column","capitalizeCellData","map","word","nameCol","positionCol","officeCol","ageCol","salaryCol","toLocaleString","currency","minimumFractionDigits","maximumFractionDigits","FormData"],"version":3,"file":"index.34ae77fe.js.map"}